// tslint:disable
/* eslint-disable */
/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
    ModelApiResponse,
    ModelApiResponseFromJSON,
    ModelApiResponseMapFromJSON,
    ModelApiResponseToJSON,
    Pet,
    PetFromJSON,
    PetMapFromJSON,
    PetToJSON
} from '../models';

/**
 * no description
 */
export class PetApi extends runtime.BaseAPI {
    /**
     * Add a new pet to the store
     */
    async addPetRaw(requestParameters: { body: Pet }): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter requestParameters.body was null or undefined when calling addPet.'
            );
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters['Authorization'] = this.configuration.accessToken('petstore_auth', [
                    'write:pets',
                    'read:pets'
                ]);
            } else {
                headerParameters['Authorization'] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/pet`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PetToJSON(requestParameters.body)
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add a new pet to the store
     */
    async addPet(requestParameters: { body: Pet }): Promise<void> {
        await this.addPetRaw(requestParameters);
    }

    /**
     * Deletes a pet
     */
    async deletePetRaw(requestParameters: { petId: number; apiKey?: string }): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.petId === null || requestParameters.petId === undefined) {
            throw new runtime.RequiredError(
                'petId',
                'Required parameter requestParameters.petId was null or undefined when calling deletePet.'
            );
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiKey !== undefined && requestParameters.apiKey !== null) {
            headerParameters['api_key'] = String(requestParameters.apiKey);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters['Authorization'] = this.configuration.accessToken('petstore_auth', [
                    'write:pets',
                    'read:pets'
                ]);
            } else {
                headerParameters['Authorization'] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/pet/{petId}`.replace(`{${'petId'}}`, encodeURIComponent(String(requestParameters.petId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a pet
     */
    async deletePet(requestParameters: { petId: number; apiKey?: string }): Promise<void> {
        await this.deletePetRaw(requestParameters);
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Finds Pets by status
     */
    async findPetsByStatusRaw(requestParameters: {
        status: Array<FindPetsByStatusStatusEnum>;
    }): Promise<runtime.ApiResponse<Array<Pet>>> {
        if (requestParameters.status === null || requestParameters.status === undefined) {
            throw new runtime.RequiredError(
                'status',
                'Required parameter requestParameters.status was null or undefined when calling findPetsByStatus.'
            );
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters['Authorization'] = this.configuration.accessToken('petstore_auth', [
                    'write:pets',
                    'read:pets'
                ]);
            } else {
                headerParameters['Authorization'] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/pet/findByStatus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters
        });

        return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(PetFromJSON));
    }

    /**
     * Multiple status values can be provided with comma separated strings
     * Finds Pets by status
     */
    async findPetsByStatus(requestParameters: { status: Array<FindPetsByStatusStatusEnum> }): Promise<Array<Pet>> {
        const response = await this.findPetsByStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * Finds Pets by tags
     */
    async findPetsByTagsRaw(requestParameters: { tags: Array<string> }): Promise<runtime.ApiResponse<Array<Pet>>> {
        if (requestParameters.tags === null || requestParameters.tags === undefined) {
            throw new runtime.RequiredError(
                'tags',
                'Required parameter requestParameters.tags was null or undefined when calling findPetsByTags.'
            );
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.tags) {
            queryParameters['tags'] = requestParameters.tags;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters['Authorization'] = this.configuration.accessToken('petstore_auth', [
                    'write:pets',
                    'read:pets'
                ]);
            } else {
                headerParameters['Authorization'] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/pet/findByTags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters
        });

        return new runtime.JSONApiResponse(response, jsonValue => jsonValue.map(PetFromJSON));
    }

    /**
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * Finds Pets by tags
     */
    async findPetsByTags(requestParameters: { tags: Array<string> }): Promise<Array<Pet>> {
        const response = await this.findPetsByTagsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a single pet
     * Find pet by ID
     */
    async getPetByIdRaw(requestParameters: { petId: number }): Promise<runtime.ApiResponse<Pet>> {
        if (requestParameters.petId === null || requestParameters.petId === undefined) {
            throw new runtime.RequiredError(
                'petId',
                'Required parameter requestParameters.petId was null or undefined when calling getPetById.'
            );
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters['api_key'] = this.configuration.apiKey('api_key'); // api_key authentication
        }

        const response = await this.request({
            path: `/pet/{petId}`.replace(`{${'petId'}}`, encodeURIComponent(String(requestParameters.petId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters
        });

        return new runtime.JSONApiResponse(response, jsonValue => PetFromJSON(jsonValue));
    }

    /**
     * Returns a single pet
     * Find pet by ID
     */
    async getPetById(requestParameters: { petId: number }): Promise<Pet> {
        const response = await this.getPetByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing pet
     */
    async updatePetRaw(requestParameters: { body: Pet }): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter requestParameters.body was null or undefined when calling updatePet.'
            );
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters['Authorization'] = this.configuration.accessToken('petstore_auth', [
                    'write:pets',
                    'read:pets'
                ]);
            } else {
                headerParameters['Authorization'] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/pet`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PetToJSON(requestParameters.body)
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an existing pet
     */
    async updatePet(requestParameters: { body: Pet }): Promise<void> {
        await this.updatePetRaw(requestParameters);
    }

    /**
     * Updates a pet in the store with form data
     */
    async updatePetWithFormRaw(requestParameters: {
        petId: number;
        name?: string;
        status?: string;
    }): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.petId === null || requestParameters.petId === undefined) {
            throw new runtime.RequiredError(
                'petId',
                'Required parameter requestParameters.petId was null or undefined when calling updatePetWithForm.'
            );
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters['Authorization'] = this.configuration.accessToken('petstore_auth', [
                    'write:pets',
                    'read:pets'
                ]);
            } else {
                headerParameters['Authorization'] = this.configuration.accessToken;
            }
        }

        const formData = new FormData();
        if (requestParameters.name !== undefined) {
            formData.append('name', requestParameters.name as any);
        }

        if (requestParameters.status !== undefined) {
            formData.append('status', requestParameters.status as any);
        }

        const response = await this.request({
            path: `/pet/{petId}`.replace(`{${'petId'}}`, encodeURIComponent(String(requestParameters.petId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formData
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a pet in the store with form data
     */
    async updatePetWithForm(requestParameters: { petId: number; name?: string; status?: string }): Promise<void> {
        await this.updatePetWithFormRaw(requestParameters);
    }

    /**
     * uploads an image
     */
    async uploadFileRaw(requestParameters: {
        petId: number;
        additionalMetadata?: string;
        file?: Blob;
    }): Promise<runtime.ApiResponse<ModelApiResponse>> {
        if (requestParameters.petId === null || requestParameters.petId === undefined) {
            throw new runtime.RequiredError(
                'petId',
                'Required parameter requestParameters.petId was null or undefined when calling uploadFile.'
            );
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters['Authorization'] = this.configuration.accessToken('petstore_auth', [
                    'write:pets',
                    'read:pets'
                ]);
            } else {
                headerParameters['Authorization'] = this.configuration.accessToken;
            }
        }

        const formData = new FormData();
        if (requestParameters.additionalMetadata !== undefined) {
            formData.append('additionalMetadata', requestParameters.additionalMetadata as any);
        }

        if (requestParameters.file !== undefined) {
            formData.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/pet/{petId}/uploadImage`.replace(
                `{${'petId'}}`,
                encodeURIComponent(String(requestParameters.petId))
            ),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formData
        });

        return new runtime.JSONApiResponse(response, jsonValue => ModelApiResponseFromJSON(jsonValue));
    }

    /**
     * uploads an image
     */
    async uploadFile(requestParameters: {
        petId: number;
        additionalMetadata?: string;
        file?: Blob;
    }): Promise<ModelApiResponse> {
        const response = await this.uploadFileRaw(requestParameters);
        return await response.value();
    }
}

/**
 * @export
 * @enum {string}
 */
export enum FindPetsByStatusStatusEnum {
    Available = 'available',
    Pending = 'pending',
    Sold = 'sold'
}
